// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(USER)
    plan          UserPlan  @default(FREE)
    chats         Chat[]
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PDF {
    id      String    @id @default(cuid())
    fileUrl String    @db.Text
    name    String    @db.Text
    key     String    @db.Text
    size    Int
    status  PDFStatus

    Chat Chat[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Chat {
    id       String    @id @default(cuid())
    title    String
    messages Message[]
    pdfId    String
    authorId String

    PDF    PDF  @relation(fields: [pdfId], references: [id], onDelete: Cascade)
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Message {
    id      String      @id @default(cuid())
    content String      @db.Text
    role    MessageRole
    chatId  String

    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum PDFStatus {
    FAILED
    PROCESSING
    COMPLETE
}

enum UserPlan {
    FREE
    PRO
    ADMIN
}

enum UserRole {
    ADMIN
    USER
}

enum MessageRole {
    user
    assistant
    system
}
